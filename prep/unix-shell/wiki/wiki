#!/bin/bash

# Grab the first argument which is the title of the article.
# {} is used for parameter expansion: https://superuser.com/questions/935374/difference-between-and-in-shell-script
SUBJECT=${1}
SUB_SECTION=${2}
echo "Subject: $SUBJECT"
echo "Sub-Section: $SUB_SECTION"
echo ""

# Translate input into format expected by Wikipedia for whitespace delimited topics like "cold brew" or "George Washington".
#NEW_SUBJECT=$(echo "$SUBJECT" | tr ' ' '_')
#echo "New Subject: $NEW_SUBJECT"
#echo ""

# Check whether $SUBJECT is empty. If true, output error message and exit(1).
if [[ -z "$SUBJECT"  ]]; then
  echo -e "Must provide name of article - Ex: ./wiki walrus\n" 1>&2
  exit 1
fi

# Get the webpage for the Wikipedia article and store output in a variable.
#ARTICLE=$(curl -s --location https://en.wikipedia.org/wiki/$SUBJECT)

# For local, offline development.
ARTICLE=$(cat ./walrus.html)

# Check whether $SUB_SECTION is empty. If true, fetch first sentence of article and section headings.
if [[ -z "$SUB_SECTION"  ]]; then

  # Process part of the article to get the first sentence.
  FIRST_SENTENCE=$(echo "$ARTICLE" | grep "$SUBJECT" | head -n 5 | grep "<p>" | head -n 1 | cut -d'.' -f1)
  PLAIN_SENTENCE=$(echo "$FIRST_SENTENCE" | sed -E $'s/>/#\\\n/g' | sed -E $'s/</\\\n#/g' | grep -v "#" | tr -d '\n')
  
  # Grab list of first level section headings.
  SECTION_HEADINGS=$(echo "$ARTICLE" |  grep -n "toclevel-1" | tr "<" "\n" | grep "href" | tr '"' '\n' | grep "#" | tr -d "#")
  
  # Output to the user.
  echo -e "${PLAIN_SENTENCE}.\n"
  echo -e "Section Headings:\n"
  echo -e "${SECTION_HEADINGS}\n"
  
  exit 0
else
# If false, fetch first sentence of specified section and list of subsections.
  echo -e "Working on providing first sentence of sub-section!\n"
  #echo "Requested Sub-Section: $SUB_SECTION"

  # Process first sentence of sub-section.
  FIRST_SUB_SECTION_LETTER=$(echo "$SUB_SECTION" | cut -c1 | tr "[:lower:]" "[:upper:]")
  LOWER_CASE_SUB_SECTION_LETTERS=$(echo "$SUB_SECTION" | cut -c2-)
  UPPERCASE_SUB_SECTION=$(echo "$FIRST_SUB_SECTION_LETTER""$LOWER_CASE_SUB_SECTION_LETTERS")
  FIRST_SUB_SECTION_SENTENCE=$(echo "$ARTICLE" | sed -n "/id=\"$UPPERCASE_SUB_SECTION\"/,/<\/p>/p" | sed -n '/<p>/,/<\/p>/p' | cut -d'.' -f1 | sed -E $'s/>/~\\\n/g' | sed -E $'s/</\\\n~/g' | sed -n '1,/~\/p~/p' | grep -v '~' | tr -d '\n')
  echo -e "${FIRST_SUB_SECTION_SENTENCE}.\n"

  # Grab list of second level section headings.
  #SUB_SECTION_HEADINGS=$(echo "$ARTICLE" |  grep -n "toclevel-1" | tr "<" "\n" | grep "href" | tr '"' '\n' | grep "#" | tr -d "#")

  SECTION_TOC_NUMBER=$(echo "$ARTICLE" | sed -n '/<div id="toc" class="toc"/,/<\/div>/p' | grep -i "$SUB_SECTION" | sed -E $'s/>/#\\\n/g' | sed -E $'s/</\\\n#/g' | grep -v "#" | grep -Eiv "[a-z]" | tr -d '\n' | tr -d ' ')
  echo "Section TOC Number: $SECTION_TOC_NUMBER"
  echo ""

  SUB_SECTIONS_HEADINGS=$(echo "$ARTICLE" | sed -n '/<div id="toc" class="toc"/,/<\/div>/p' | grep "tocnumber\">$SECTION_TOC_NUMBER\." | tr "<" "\n" | grep "href" | tr '"' '\n' | grep "#" | tr -d "#")

  if [[ ! -z "$SUB_SECTIONS_HEADINGS" ]]; then
    echo -e "Subsection Headings:\n"
    echo -e  "$SUB_SECTIONS_HEADINGS\n"
  else
    echo -e "No subsections under $SUB_SECTION\n"
  fi

  exit 0
fi

